//!
//! The 'IERC20' contract implemented with Zinc for layer2
//!
//! Reference: 
//! https://github.com/OpenZeppelin/openzeppelin-contracts/tree/243adff49ce1700e0ecb99fe522fb16cff1d1ddc
//! openzeppelin-contracts/contracts/token/ERC20/ERC20.sol

use std::collections::MTreeMap;

pub type Address = u160;

// u248 for u248
// embeded map not supported in Zinc, so use limited number(4 for now) of allowed Addresses
struct allowedAmount {
    Address1: (Address, u248),
    Address2: (Address, u248),
    Address3: (Address, u248),
    Address4: (Address, u248),
}

contract Ierc20 {
	_balances: MTreeMap<Address, u248>;
	_allowances: MTreeMap<Address, allowedAmount>;

    _totalSupply: u248;

    // string not supported
    // string private self._name;
    // string private self._symbol;

    pub fn new() -> Self {
        Self 
    }

    /**
     * @dev -> the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this pub fn is
     * overridden;
     *
     * NOTE: This information is only used for self._displayself._ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    pub fn decimals() -> u8 {
        18
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    pub fn totalSupply(self) -> u248 {
        self._totalSupply
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    pub fn balanceOf(self, account: Address) -> u248 {
        self._balances.get(account).0
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero Address.
     * - the caller must have a balance of at least `amount`.
     */
    fn transferERC(mut self, recipient: Address, amount: u248) -> bool {
        self._transfer(zksync::msg.sender, recipient, amount);
        true
    }

    /**
     * transfer min(amount, balance) without errors
     */
    fn safeTransfer(mut self, recipient: Address, amount: u248) {
        let balance = self._balances.get(zksync::msg.sender).0;

        if (amount > balance) {
            self._transfer(zksync::msg.sender, recipient, balance);
        } else {
            self._transfer(zksync::msg.sender, recipient, amount);
        }
    }

    /**
     * transferFrom without errors
     */
    fn safeTransferFrom(mut self, sender: Address, recipient: Address, amount: u248) {
        self._transfer(sender, recipient, amount);

        let currentAllowance = self.allowance(sender, zksync::msg.sender);
        if (amount > currentAllowance) {
            self._approve(sender, zksync::msg.sender, 0 as u248);
        } else {
            self._approve(sender, zksync::msg.sender, currentAllowance - amount);
        }
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    fn allowance(self, owner: Address, spender: Address) -> u248 {
    	// todo: in case of non-existing owner or spender?
        let amount = self._allowances.get(owner).0;
        if spender == amount.Address1.0 {
        	amount.Address1.1
        } else if spender == amount.Address2.0 {
        	amount.Address2.1
        } else if spender == amount.Address3.0 {
        	amount.Address3.1
        } else if spender == amount.Address4.0 {
        	amount.Address4.1
        } else {
        	0 as u248
        }
        // match spender {
        // 	allowedAmount.Address1.0 => allowedAmount.Address1.1,
        // 	allowedAmount.Address2.0 => allowedAmount.Address2.1,
        // 	allowedAmount.Address3.0 => allowedAmount.Address3.1,
        // 	allowedAmount.Address4.0 => allowedAmount.Address4.1,

        // 	_ => 0 as u248,
        // }
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero Address.
     */
    fn approve(mut self, spender: Address, amount: u248) -> bool {
        self._approve(zksync::msg.sender, spender, amount);
        true
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero Address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    pub fn transferFrom(mut self, sender: Address, recipient: Address, amount: u248) -> bool {
        self._transfer(sender, recipient, amount);

        let currentAllowance = self.allowance(sender, zksync::msg.sender);
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        self._approve(sender, zksync::msg.sender, currentAllowance - amount);

        true
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero Address.
     */
    pub fn increaseAllowance(mut self, spender: Address, addedValue: u248) -> bool {
        self._approve(zksync::msg.sender, spender, self.allowance(zksync::msg.sender, spender) + addedValue);
        true
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero Address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    pub fn decreaseAllowance(mut self, spender: Address, subtractedValue: u248) -> bool {
        let currentAllowance = self.allowance(zksync::msg.sender, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        self._approve(zksync::msg.sender, spender, currentAllowance - subtractedValue);

        true
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is pub fn is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero Address.
     * - `recipient` cannot be the zero Address.
     * - `sender` must have a balance of at least `amount`.
     */
    fn _transfer(mut self, sender: Address, recipient: Address, amount: u248) {
        require(sender != 0 as Address, "ERC20: transfer from the zero Address");
        require(recipient != 0 as Address, "ERC20: transfer to the zero Address");

        // self._beforeTokenTransfer(sender, recipient, amount);

        let senderBalance = self._balances.get(sender).0;
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        self._balances.insert(sender, senderBalance-amount);
        self._balances.insert(recipient, self._balances.get(recipient).0+amount);

        // emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero Address.
     *
     * Requirements:
     *
     * - `to` cannot be the zero Address.
     */
    pub fn _mint(mut self, account: Address, amount: u248) {
        require(account != 0 as Address, "ERC20: mint to the zero Address");

        // self._beforeTokenTransfer(0 as Address, account, amount);

        self._totalSupply += amount;
        self._balances.insert(account, self._balances.get(account).0+amount);
        // emit Transfer(0 as Address, account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero Address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero Address.
     * - `account` must have at least `amount` tokens.
     */
    fn _burn(mut self, account: Address, amount: u248) {
        require(account != 0 as Address, "ERC20: burn from the zero Address");

        // self._beforeTokenTransfer(account, 0 as Address, amount);

        let accountBalance = self._balances.get(account).0;
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        self._balances.insert(account, accountBalance - amount);
        self._totalSupply -= amount;

        // emit Transfer(account, 0 as Address, amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This pub fn is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero Address.
     * - `spender` cannot be the zero Address.
     */
    fn _approve(mut self, owner: Address, spender: Address, amount: u248) {
        require(owner != 0 as Address, "ERC20: approve from the zero Address");
        require(spender != 0 as Address, "ERC20: approve to the zero Address");

        // in case of non-existing owner 
        if !self._allowances.get(owner).1 {
	        self._allowances.insert(owner, 
	        	allowedAmount{
	        		Address1: (spender, amount),
	        		Address2: (0 as Address, 0 as u248),
	        		Address3: (0 as Address, 0 as u248),
	        		Address4: (0 as Address, 0 as u248),
		        }
	        );
        }

		// todo: in case of non-existing owner or spender?
        let mut amount1 = self._allowances.get(owner).0;
        // match spender {
        // 	amount1.Address1.0 => amount1.Address1.1 = amount,
        // 	amount1.Address2.0 => amount1.Address2.1 = amount,
        // 	amount1.Address3.0 => amount1.Address3.1 = amount,
        // 	amount1.Address4.0 => amount1.Address4.1 = amount,

        // 	_ => {
        // 		require(amount1.Address4.0 ==0 as Address, "allowed addresses are full!");
        // 		0 as u248
        // 		},
        // };
        if spender == amount1.Address1.0 {
        	amount1.Address1.1 = amount; 
        } else if spender == amount1.Address2.0 {
        	amount1.Address1.1 = amount;
        } else if spender == amount1.Address3.0 {
        	amount1.Address1.1 = amount;
        } else if spender == amount1.Address4.0 {
        	amount1.Address1.1 = amount;
        } else {
        	require(amount1.Address4.0 ==0 as Address, "allowed addresses are full!");
        	amount1.Address1 = (spender, amount); 
        }
        self._allowances.insert(owner, amount1);
        // emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be to transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    // pub fn _beforeTokenTransfer(Address from, Address to, amount: u248) { }
}
